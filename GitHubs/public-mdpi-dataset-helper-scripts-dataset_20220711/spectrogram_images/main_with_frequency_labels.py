"""Enhanced main script for generating spectrograms with frequency labels and YOLO bounding boxes

This script creates spectrograms with:
1. Frequency axis labels (MHz)
2. YOLO bounding box labels overlaid
3. Proper coordinate system handling
"""

import argparse
from pathlib import Path

from spectrogram_images.generator_with_frequency_labels import make_spectrograms_with_frequency_labels, Resolution
from spectrogram_images.directory_manager import DirectoryManager
from spectrogram_images.sample_files_list import SampleFileList

parser = argparse.ArgumentParser(
    description="Generate spectrogram images with frequency labels and YOLO bounding boxes from signal sample files.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument(
    "-p",
    "--path",
    type=Path,
    required=True,
    help="root path of the spectrogram data set",
)
parser.add_argument(
    "-c",
    "--colormap",
    type=str,
    default="viridis",
    help="matplotlib colormap used for spectrogram generation",
)
parser.add_argument(
    "-r",
    "--resolution",
    nargs=2,
    default=[1024, 192],
    type=int,
    metavar=("x", "y"),
    help="Target resolution of the generated spectrogram images (e.g., -r 1024 192 )",
)
parser.add_argument(
    "-o",
    "--output-dir",
    type=str,
    default="results_with_frequency",
    help="Output directory for marked spectrograms",
)
parser.add_argument(
    "--no-frequency-axis",
    action="store_true",
    help="Disable frequency axis labels (for YOLO training)",
)
parser.add_argument(
    "--center-freq",
    type=float,
    default=2.412e9,
    help="Center frequency in Hz for frequency calculations",
)
parser.add_argument(
    "--max-samples",
    type=int,
    default=None,
    help="Maximum number of samples to process (for testing)",
)


if __name__ == "__main__":
    args = parser.parse_args()

    # Container of the datasets folder structure
    dir_manager = DirectoryManager(args.path)

    # Read all sample files from "results" directory
    sample_files = SampleFileList(dir_manager)

    # Exclude spectrograms that are intended to be generated by a tx-rx-loop using a specific USRP
    sample_files = sample_files.get_wo_usrp_txrx_loop()
    
    # Limit samples if specified (for testing)
    if args.max_samples:
        sample_files = sample_files[:args.max_samples]
        print(f"Processing only {len(sample_files)} samples for testing...")

    print("Generate spectrogram images with frequency labels and YOLO bounding boxes...")
    print(f"Output directory: {args.output_dir}")
    print(f"Show frequency axis: {not args.no_frequency_axis}")
    print(f"Center frequency: {args.center_freq/1e9:.3f} GHz")

    make_spectrograms_with_frequency_labels(
        sample_files=sample_files,
        png_resolution=Resolution(x=args.resolution[0], y=args.resolution[1]),
        colormap=args.colormap,
        auto_normalization=False,
        results2_dir=args.output_dir,
        show_frequency_axis=not args.no_frequency_axis,
        center_freq=args.center_freq,
    )
